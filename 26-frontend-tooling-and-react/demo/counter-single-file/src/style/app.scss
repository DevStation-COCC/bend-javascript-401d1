/*
  What? Functions for CSS? Yep, SASS calls them mixins.
  Notice that variables can be used with $ prefix...
 */
@mixin circle($size) {
  border-radius:50%;
  line-height:$size;
  padding:$size;
  text-align:center;
  height:$size;
  width:$size;
}

html, body {
  height:100%;
  width:100%;
  margin:0;
  padding:0;
}

* {
  boz-sizing: border-box;
}

body {
  background:#f5f5f5;
  color:#000;
  font-size:16px;
  height:100%;
}

#root {
  margin:0;
  padding:0;
  display:flex;
  height:100%;
  flex-direction:column;
}

main {
  flex:1;
}

header {
  background:#ccc;
  border-bottom:2px double black;
  margin-bottom:2em;
  padding:0 2em;

  h1 {
    margin:0;
    font-size:1.5em;
    line-height:2em;
  }
}

footer {
  background:#ccc;
  border-top:2px double black;
  margin-top:2em;
  padding:0 2em;

  p {
    color: red;
  }
}

/*
  The real power of SASS is the usability and grokkability you get
  from it as a developer. By physically nesting selectors, your
  ability to not only target, but see the path of what you're targeting
  is very easy.
 */
.container {

  display:flex;
  flex-direction:row;
  justify-content:center;
  align-items:center;

  #up, #down, #counter {
    margin:.5em;
  }

  #up, #down {
    @include circle(1em);
    border: 1px solid #ccc;
    color:#000;
    display:block;
    text-decoration:none;
  }

  #up {
    order:2;

    /*
      Use the & prefix on a selector in SASS to "attach" that selector to the parent.
      In this case, the resulting selector will be:

         #up:hover

     */

    &:hover {
      background:blue;
      color:#fff;
    }
  }

  #down {
    order:0;
    &:hover {
      background:red;
      color:#fff;
    }
  }

  #counter {

    @include circle(1em);
    background:#efefef;
    border:double;
    font-size:3em;
    font-weight:bold;
    font-style:italic;
    order:1;

    &.positive {
      color:blue;
    }

    &.negative {
      color:red;
    }
  }

}
